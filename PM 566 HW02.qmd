---
title: "PM 566 HW 02"
author: "Ziquan 'Harrison' Liu"
format: 
  html:
    embed-resources: true
fig-width: 8
fig-heigth: 6
---
# Packages
```{r}
library(nycflights13)
library(dplyr)
library(ggplot2)
library(lubridate)
library(stringr)
library(maps)
library(tidyverse)
library(scales)
library(janitor)
library(knitr)
library(leaflet)
library(forcats)
library(tidytext)
library(magrittr)
library(rstatix)
library(tidyr)
library(patchwork)  # to collect guides into one legend
library(hexbin)
library(ggcorrplot)
```
# Check on all description of dataset
```{r}
summary(flights)
summary(airlines)
summary(airports)
summary(planes)
summary(weather)
```
# standardize time
```{r}
# helper: convert HHMM integer time (e.g., 517) to hour-of-day on [0,24)
to_hour <- function(x) ifelse(is.na(x), NA_real_, (x %/% 100) %% 24 + (x %% 100)/60)

# helper: map hour to part-of-day
part_of_day <- function(hour) {
  cut(hour,
      breaks = c(0, 6, 12, 18, 24),
      labels = c("early morning", "morning", "afternoon", "evening"),
      right = FALSE, include.lowest = TRUE)
}
```
# Question 1
```{r}
top10_dest <- flights %>%
  count(dest, sort = TRUE, name = "n_flights") %>%
  slice_head(n = 10)
top10_dest
```
## Based on the result above, The top 10 most popular destinations with number of flights are as follows: ORD with 17283 flights, ATL with 17215 flights, LAX with 16174 flights, BOS with 15508 flights, MCO with 14082 flights, CLT with 14064 flights, SFO with 13331 flights, FLL with 12055 flights, MIA with 11728 flights, and DCA with 9705 flights.

# Question 2
```{r}
flights2 <- flights %>%
  mutate(
    dep_hour = to_hour(dep_time),
    arr_hour = to_hour(arr_time),
    dep_part = part_of_day(dep_hour),
    arr_part = part_of_day(arr_hour)
  )

# barplots
## select corlor
pal <- c(
  "early morning" = "lightblue1",
  "morning"       = "darkblue",
  "afternoon"     = "violet",
  "evening"       = "purple4"
)

ggplot(flights2, aes(x = dep_part, fill = dep_part)) +
  geom_bar() +
  scale_x_discrete(na.translate = FALSE) +         # mute NA category
  scale_fill_manual(values = pal, na.translate = FALSE) + 
  labs(x = "Departure part of day", y = "Flights",
       title = "Flights by departure time category") +
  guides(fill = guide_legend(title = "Departure")) +
  theme_minimal()

ggplot(flights2, aes(x = arr_part, fill = arr_part)) +
  geom_bar() +
  scale_x_discrete(na.translate = FALSE) +         
  scale_fill_manual(values = pal, na.translate = FALSE) +
  labs(x = "Arrival part of day", y = "Flights",
       title = "Flights by arrival time category") +
  guides(fill = guide_legend(title = "Arrival")) +
  theme_minimal()
```
```{r}
valid <- flights2 %>%                                   # flights2 has dep_part & arr_part already
  filter(!is.na(dep_part), !is.na(arr_part))            # keep only rows with both parts defined (drops NAs -> e.g.: cancelled/diverted)
# generate red_eye
red_eye <- valid %>%                                    # work on the valid data
  mutate(is_redeye =                                     # create a logical flag: is this flight a "red-eye"?
           dep_part %in% c("afternoon","evening") &      # TRUE if it departs in the afternoon or evening
           arr_part %in% c("early morning","morning")) %>% # AND TRUE if arrives in early morning or morning
  summarise(                                             # collapse into a 1-row summary
    n = n(),                                             # denominator: number of flights after the NA filter
    n_redeye = sum(is_redeye),                           # count of red-eye flights (TRUEs sum to integers)
    pct_redeye = 100 * n_redeye / n                      # percentage of red-eye flights
  )
red_eye                                                  # print the summary table
```
## Based on the result above, after rmoved NA, the barplots are above. The percentage of flights were “red eye” flights was about 3.28%.

# Question 3
```{r}
tail_carriers <- flights %>%                                           
  filter(!is.na(tailnum), tailnum != "", !is.na(carrier)) %>%          # keep rows with a valid tail number and carrier
  distinct(tailnum, carrier) %>%                                       # reduce to unique tailnum–carrier pairs
  left_join(airlines, by = "carrier")                                  # attach full airline names via carrier code
# count distinct carriers per plane, keep those with >1
multi_airline_planes <- tail_carriers %>%                              # work on the unique pairs
  group_by(tailnum) %>%                                                # one summary per aircraft (tail number)
  summarise(
    n_airlines = n_distinct(carrier),                                  # how many different carriers flew this plane
    airlines   = paste(sort(unique(name)), collapse = ", "),           # list those carriers’ names, alphabetically
    .groups    = "drop"                                                # return an ungrouped data frame
  ) %>%
  filter(n_airlines > 1) %>%                                           # keep only planes that served >1 airline
  arrange(desc(n_airlines), tailnum)                                   # order by most carriers, then by tail number
# how many such planes?
n_multi_planes <- nrow(multi_airline_planes)                           # count how many such planes there are
n_multi_planes                                                         # print count
multi_airline_planes                                                   # print detailed table

```
## Based on the result above, there are 17 in total planes that flew for multiple airlines. Such airlines were: Endeavor Air Inc., ExpressJet Airlines Inc., and AirTran Airways Corporation, Delta Air Lines Inc..

# Question 4
```{r}
table(weather$origin)
table(airports$faa)
```

```{r}
# The missing key is: weather$origin  <->  airports$faa
# Example join to attach airport metadata to each weather row:
weather_with_airport <- weather %>%
  left_join(airports %>% select(faa, name, lat, lon, tz), by = c("origin" = "faa"))
# peek to confirm the relationship
weather_with_airport %>% select(origin, name, time_hour) %>% slice_head(n = 5)
```
## Reports: After reviewing the dataset, the missing relationship between weather and airports datasets was the code of ariline (weather$origin and airports$faa). In the weather datasets, the "origin" colomn has only three airports categories (EWR, JFK, and LGA). The coding above was my conducting to merge two datasets based on the weather$origin and airports$faa.

# Question 5
```{r}
weather_keyed <- weather %>%
  mutate(
    hw_key = str_c(year, month, day, hour, origin, sep = "-")
  )

dup_count <- sum(duplicated(weather_keyed$hw_key))
dup_breakdown <- weather_keyed %>%
  count(year, month, day, hour, origin, name = "n") %>%
  arrange(desc(n)) %>%
  filter(n > 1)

dup_count
head(dup_breakdown)
```
## Reports: Based on the result above, there are 3 pairs of duplicated values. It might because multiple measurements can be recorded within the same hour at an airport. Therefore, we got >1 row per  hour origin.

# Merge weather onto each flight by scheduled departure hour & origin
```{r}
flights_weather <- flights %>%
  select(year, month, day, dep_time, sched_dep_time, dep_delay, arr_delay,
         origin, dest, time_hour, flight, carrier, tailnum) %>%
  left_join(weather %>% select(origin, time_hour, temp, dewp, humid, wind_dir,
                               wind_speed, wind_gust, precip, pressure, visib),
            by = c("origin","time_hour"))

dim(flights_weather); flights_weather %>% glimpse()
# Each flight now carries the *departure-hour* weather at its origin.
```

# Question 6
## For this question, I referred the checklist from the lecture slide in the 3rd week (EDA Checklist: The goal of EDA is to better understand your data. Let’s use the checklist:
### 2. Check the size of the data
### 3. Examine the variables and their types
### 4. Look at the top and bottom of the data
### 5. Visualize the distributions of key variables
```{r}
# 6a) Size of the data
nrow(flights_weather)      # number of rows (flights)
ncol(flights_weather)      # number of columns (variables)

# 6b) Examine variables and their types
glimpse(flights_weather)   # compact structure: names, types, and example values

# 6c) Look at the top and bottom of the data
head(flights_weather, 5)   # first 5 rows
tail(flights_weather, 5)   # last 5 rows

# 6d) Visualize distributions of key variables related to delays & weather
# Departure delay distribution (trim extreme to visualize; delays are in minutes)
ggplot(flights_weather, aes(x = dep_delay)) +                   # histogram of departure delay
  geom_histogram(binwidth = 5, fill = "#1f78b4", color = "purple4") +                                # 5-minute bins, color
  coord_cartesian(xlim = c(-50, 200)) +                         # focus on common range
  labs(title = "Departure delay distribution", x = "Minutes", y = "Count")

# Weather: precipitation (many zeros, heavy right tail)
ggplot(flights_weather, aes(x = precip)) +
  geom_histogram(binwidth = 0.1, fill = "yellow1", color = "purple4") +
  coord_cartesian(xlim = c(0, 2)) +
  labs(title = "Precipitation (inches) distribution", x = "Precip", y = "Count")

# Weather: wind speed
ggplot(flights_weather, aes(x = wind_speed)) +
  geom_histogram(binwidth = 1,fill = "lightblue4", color = "purple4") +
  labs(title = "Wind speed distribution", x = "Wind speed (mph)", y = "Count")

# Weather: visibility
ggplot(flights_weather, aes(x = visib)) +
  geom_histogram(binwidth = 1, fill = "#7570b3", color = "purple4") +
  labs(title = "Visibility distribution", x = "Miles", y = "Count")
```
```{r}
# Quick expectation check: scatter of dep_delay vs key weather features
# Each plot maps a constant label to 'color' so a legend exists to collect
p_wind <- ggplot(flights_weather, aes(wind_speed, dep_delay, color = "Wind speed")) +
  geom_point(alpha = 0.05, size = 0.4, color = "purple4", na.rm = TRUE) +
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), se = FALSE, size = 1) +
  coord_cartesian(ylim = c(-30, 180)) +
  labs(x = "Wind speed (mph)", y = "Departure delay (min)", color = NULL)

p_prec <- ggplot(flights_weather, aes(precip, dep_delay, color = "Precipitation")) +
  geom_point(alpha = 0.05, size = 0.4, color = "purple1", na.rm = TRUE) +
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), se = FALSE, size = 1) +
  coord_cartesian(xlim = c(0, 2), ylim = c(-30, 180)) +
  labs(x = "Precip (inches)", y = NULL, color = NULL)

p_vis  <- ggplot(flights_weather, aes(visib, dep_delay, color = "Visibility")) +
  geom_point(alpha = 0.05, size = 0.4, color = "blue", na.rm = TRUE) +
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), se = FALSE, size = 1) +
  coord_cartesian(ylim = c(-30, 180)) +
  labs(x = "Visibility (miles)", y = NULL, color = NULL)

p_wind
p_prec
p_vis

ggplot(
  flights_weather %>%
    filter(is.finite(dep_delay), is.finite(wind_speed)) %>%       # drop NAs first
    slice_sample(n = 80000),                                      # smaller sample
  aes(wind_speed, dep_delay)
) +
  geom_point(alpha = 0.08, size = 0.4, color = "lightblue4") +
  geom_smooth(method = "loess", se = FALSE, span = 0.8) +         # LOESS on a sample is fine
  coord_cartesian(ylim = c(-30, 180)) +
  labs(title = "LOESS on a sample", x = "Wind speed (mph)", y = "Departure delay (min)")
```
## The result above are my performing follwed steps 2-5 of the EDA checklist presented in class.

# Question 7
```{r}
# Helper to keep only flights with a reported dep_delay
fw <- flights_weather %>% filter(!is.na(dep_delay))

# 7a. Average departure delay by *day*
daily <- fw %>%
  group_by(year, month, day) %>%
  summarise(avg_dep_delay = mean(dep_delay), n = n(), .groups = "drop") %>%
  arrange(desc(avg_dep_delay))
head(daily, 1)    # worst day

# 7b. By day × origin
daily_org <- fw %>%
  group_by(origin, year, month, day) %>%
  summarise(avg_dep_delay = mean(dep_delay), n = n(), .groups = "drop") %>%
  arrange(desc(avg_dep_delay))
head(daily_org, 1) # worst airport-day

# 7c. By hour × origin
hourly_org <- fw %>%
  mutate(hour = hour(time_hour)) %>%
  group_by(origin, year, month, day, hour) %>%
  summarise(avg_dep_delay = mean(dep_delay), n = n(), .groups = "drop") %>%
  arrange(desc(avg_dep_delay))
head(hourly_org, 1) # worst airport-hour
```
## Base on the result above, when grouping by day and day along with origin, the worst average departure delay occurred on March 8th with an average delay of 83.53692 minutes and 105.7249 minutes, repectively. The letter occurred on LGA. When grouping by hour and origin, the worst average departure delay occurred on July 28th at LGA at 9 PM with an average delay of 279.6667 minutes.

# Question 8
```{r}
# Average arrival delay by destination airport (dest)
dest_avgs <- flights %>%
  filter(!is.na(arr_delay)) %>%
  group_by(dest) %>%
  summarise(avg_arr_delay = mean(arr_delay), n = n(), .groups = "drop")

airports_delay <- airports %>%
  inner_join(dest_avgs, by = c("faa" = "dest"))

usa <- map_data("state")
summary(airports_delay$avg_arr_delay)
# map
ggplot() +
  geom_polygon(data = usa, aes(long, lat, group = group),
               fill = "grey95", color = "white") +
  geom_point(data = airports_delay,
             aes(lon, lat, color = avg_arr_delay, size = n),
             alpha = 0.85) +
  scale_color_viridis_c(option = "plasma", name = "Avg\narrival delay") +
  scale_size_continuous(range = c(1, 6), name = "Flights") +
  coord_quickmap() +
  labs(title = "Spatial distribution of average arrival delays (2013)",
       subtitle = "Points sized by traffic volume, colored by average delay (minutes)",
       x = NULL, y = NULL) +
  theme_minimal()
```

# Question 9
```{r}
# 9a) Create binned weather categories to summarize relationships cleanly
merged_binned <- flights_weather %>%
  mutate(
    precip_bin = cut(precip, breaks = c(-Inf, 0, 0.1, 0.5, 1, Inf),  # none, light, mod, heavy
                     labels = c("0", "(0,0.1]", "(0.1,0.5]", "(0.5,1]", ">1")),
    wind_bin   = cut(wind_speed, breaks = c(-Inf, 5, 10, 20, Inf),   # calm, light, breezy, high
                     labels = c("≤5", "(5,10]", "(10,20]", ">20")),
    visib_bin  = cut(visib, breaks = c(-Inf, 2, 5, 10, Inf),         # poor, fair, good, very good
                     labels = c("≤2", "(2,5]", "(5,10]", ">10"))
  )
```
```{r}
# 9b) Summaries: mean departure delay by each phenomenon
sum_precip <- merged_binned %>%
  group_by(precip_bin) %>%
  summarise(mean_dep_delay = mean(dep_delay, na.rm = TRUE), n = n()) %>%
  arrange(desc(mean_dep_delay))

sum_wind <- merged_binned %>%
  group_by(wind_bin) %>%
  summarise(mean_dep_delay = mean(dep_delay, na.rm = TRUE), n = n()) %>%
  arrange(desc(mean_dep_delay))

sum_visib <- merged_binned %>%
  group_by(visib_bin) %>%
  summarise(mean_dep_delay = mean(dep_delay, na.rm = TRUE), n = n()) %>%
  arrange(mean_dep_delay)                                         # lower visibility → usually worse

sum_precip; sum_wind; sum_visib                                  # print summaries
```
```{r}
# 9c) Visualization: which look worst?
ggplot(sum_precip, aes(precip_bin, mean_dep_delay)) +
  geom_col(fill = "purple4", color = "white") +  # select color 
  labs(title = "Mean departure delay by precipitation bin",
       x = "Precipitation (inches)", y = "Mean dep delay (min)")

ggplot(sum_wind, aes(wind_bin, mean_dep_delay)) +
  geom_col(fill = "yellow", color = "white") +
  labs(title = "Mean departure delay by wind speed bin",
       x = "Wind speed (mph)", y = "Mean dep delay (min)")

ggplot(sum_visib, aes(visib_bin, mean_dep_delay)) +
  geom_col(fill = "lightblue4", color = "white") +
  labs(title = "Mean departure delay by visibility bin",
       x = "Visibility (miles)", y = "Mean dep delay (min)")
```
```{r}
# Edit colors
col_precip  <- "#1f77b4"      # precipitation color
col_wind    <- "#d62728"      # wind color
col_visib   <- "#2ca02c"      # visibility color
col_points  <- "grey35"       # point cloud color
col_smooth  <- "#9467bd"      # smooth line color
col_bins    <- c("lightblue1", "#6baed6", "#08306b")          # low→mid→high for heatmaps
col_corr    <- c("#b2182b", "#f7f7f7", "#2166ac")          # neg→0→pos for corr heatmap
```
```{r}
# Bin the weather variables once
fw_binned <- flights_weather %>%
  mutate(
    precip_bin = cut(precip, breaks = c(-Inf, 0, 0.1, 0.5, 1, Inf),
                     labels = c("0", "(0,0.1]", "(0.1,0.5]", "(0.5,1]", ">1")),
    wind_bin   = cut(wind_speed, breaks = c(-Inf, 5, 10, 20, Inf),
                     labels = c("≤5", "(5,10]", "(10,20]", ">20")),
    visib_bin  = cut(visib, breaks = c(-Inf, 2, 5, 10, Inf),
                     labels = c("≤2", "(2,5]", "(5,10]", ">10"))
  )
```
```{r}
# helpful trimmed view (reduce long tail to make box/violin readable)
q_lim <- quantile(flights_weather$dep_delay, c(.02, .98), na.rm = TRUE)
ggplot(fw_binned, aes(precip_bin, dep_delay)) +
  geom_violin(fill = scales::alpha(col_precip, .6), color = NA, na.rm = TRUE) +
  geom_boxplot(width = .15, outlier.size = .5, fill = "purple4", na.rm = TRUE) +
  coord_cartesian(ylim = q_lim) +
  labs(title = "Violin + box: delay by precipitation", x = "Precipitation bin", y = "Dep delay (min)") +
  theme_minimal()
ggplot(fw_binned, aes(wind_bin, dep_delay)) +
  geom_violin(fill = scales::alpha(col_wind, .6), color = NA, na.rm = TRUE) +
  geom_boxplot(width = .15, outlier.size = .5, fill ="purple4", na.rm = TRUE) +
  coord_cartesian(ylim = q_lim) +
  labs(title = "Violin + box: delay by wind speed", x = "Wind speed bin", y = "Dep delay (min)") +
  theme_minimal()

ggplot(fw_binned, aes(visib_bin, dep_delay)) +
  geom_violin(fill = scales::alpha(col_visib, .6), color = NA, na.rm = TRUE) +
  geom_boxplot(width = .15, outlier.size = .5, fill = "purple4", na.rm = TRUE) +
  coord_cartesian(ylim = q_lim) +
  labs(title = "Violin + box: delay by visibility", x = "Visibility bin", y = "Dep delay (min)") +
  theme_minimal()
```
```{r}
# Hexbin
ggplot(flights_weather, aes(precip, dep_delay)) +
  geom_hex(bins = 40, na.rm = TRUE) +
  scale_fill_gradientn(colors = col_bins, name = "Count") +
  coord_cartesian(ylim = q_lim) +
  labs(title = "Binned heatmap: delay vs precipitation", x = "Precip (in)", y = "Dep delay (min)") +
  theme_minimal()

ggplot(flights_weather, aes(wind_speed, dep_delay)) +
  geom_hex(bins = 40, na.rm = TRUE) +
  scale_fill_gradientn(colors = col_bins, name = "Count") +
  coord_cartesian(ylim = q_lim) +
  labs(title = "Binned heatmap: delay vs wind speed", x = "Wind speed (mph)", y = "Dep delay (min)") +
  theme_minimal()

ggplot(flights_weather, aes(visib, dep_delay)) +
  geom_hex(bins = 40, na.rm = TRUE) +
  scale_fill_gradientn(colors = col_bins, name = "Count") +
  coord_cartesian(ylim = q_lim) +
  labs(title = "Binned heatmap: delay vs visibility", x = "Visibility (miles)", y = "Dep delay (min)") +
  theme_minimal()
```
```{r}
# select varaibles
vars <- c("dep_delay", "precip", "wind_speed", "visib", "temp", "humid", "pressure")
mat  <- flights_weather %>%
  select(all_of(vars)) %>%
  mutate(across(everything(), as.numeric)) %>%
  cor(use = "complete.obs", method = "spearman")  # Spearman more robust

# using ggcorrplot
ggcorrplot::ggcorrplot(
  mat, hc.order = TRUE, type = "lower", lab = TRUE, outline.col = "white",
  colors = col_corr, lab_size = 3
) + 
  ggtitle("Spearman correlation: delays vs weather")

```
```{r}
# Colors for selection
col_humid   <- "#1b9e77"   # humidity color
col_press   <- "#d95f02"   # pressure color
col_points  <- "grey35"    # scatter points
col_smooth  <- "#7570b3"   # smooth line

# Trim extreme delays just for plotting readability
q_lim <- quantile(flights_weather$dep_delay, c(.02, .98), na.rm = TRUE)
```
```{r}
fw_hp <- flights_weather %>%
  mutate(
    # Humidity ranges 0–100 (%). Adjust bins if you prefer.
    humid_bin = cut(humid,
                    breaks = c(-Inf, 30, 60, 80, Inf),
                    labels = c("≤30%", "(30,60%]", "(60,80%]", ">80%")),
    # Pressure is in millibars (hPa) in nycflights13; typical ~980–1040.
    pressure_bin = cut(pressure,
                       breaks = c(-Inf, 990, 1005, 1020, Inf),
                       labels = c("<990", "990–1005", "1005–1020", ">1020"))
  )

sum_humid <- fw_hp %>%
  group_by(humid_bin) %>%
  summarise(mean_dep_delay = mean(dep_delay, na.rm = TRUE),
            n = n(), .groups = "drop") %>%
  arrange(desc(mean_dep_delay))

sum_press <- fw_hp %>%
  group_by(pressure_bin) %>%
  summarise(mean_dep_delay = mean(dep_delay, na.rm = TRUE),
            n = n(), .groups = "drop") %>%
  arrange(desc(mean_dep_delay))

sum_humid; sum_press  # look at which bins have larger delays

```
```{r}
# Humidity
ggplot(fw_hp, aes(humid_bin, dep_delay)) +
  geom_violin(fill = scales::alpha(col_humid, .6), color = NA, na.rm = TRUE) +
  geom_boxplot(width = .15, fill = "darkblue", outlier.alpha = .15, na.rm = TRUE) +
  coord_cartesian(ylim = q_lim) +
  labs(title = "Departure delay by humidity", x = "Humidity bin", y = "Dep delay (min)") +
  theme_minimal()

# Pressure
ggplot(fw_hp, aes(pressure_bin, dep_delay)) +
  geom_violin(fill = scales::alpha(col_press, .6), color = NA, na.rm = TRUE) +
  geom_boxplot(width = .15, fill = "darkblue", outlier.alpha = .15, na.rm = TRUE) +
  coord_cartesian(ylim = q_lim) +
  labs(title = "Departure delay by pressure", x = "Pressure bin (hPa)", y = "Dep delay (min)") +
  theme_minimal()
```
```{r}
# Hexbin heatmaps (stable with huge n)
col_bins2  <- c("violet", "purple", "purple4")          # low→mid→high for heatmaps

ggplot(flights_weather, aes(humid, dep_delay)) +
  geom_hex(bins = 40, na.rm = TRUE) +
  scale_fill_gradientn(colors = col_bins2, name = "Count") +
  coord_cartesian(ylim = q_lim) +
  labs(title = "Binned heatmap: delay vs humidity", x = "Humidity (%)", y = "Dep delay (min)") +
  theme_minimal()

ggplot(flights_weather, aes(pressure, dep_delay)) +
  geom_hex(bins = 40, na.rm = TRUE) +
  scale_fill_gradientn(colors = col_bins2, name = "Count") +
  coord_cartesian(ylim = q_lim) +
  labs(title = "Binned heatmap: delay vs pressure", x = "Pressure (hPa)", y = "Dep delay (min)") +
  theme_minimal()

```

```{r}
# 9d) A quick, robust “top factors” display using partial dependence style smooths
ggplot(flights_weather, aes(precip, dep_delay)) +
  geom_bin2d(bins = 40) +
  scale_fill_viridis_c() +
  labs(title = "Binned heatmap: dep delay vs precipitation",
       x = "Precip (inches)", y = "Dep delay (min)", fill = "Count")

ggplot(flights_weather, aes(wind_speed, dep_delay)) +
  geom_bin2d(bins = 40) +
  scale_fill_viridis_c() +
  labs(title = "Binned heatmap: dep delay vs wind speed",
       x = "Wind speed (mph)", y = "Dep delay (min)", fill = "Count")

ggplot(flights_weather, aes(visib, dep_delay)) +
  geom_bin2d(bins = 40) +
  scale_fill_viridis_c() +
  labs(title = "Binned heatmap: dep delay vs visibility",
       x = "Visibility (miles)", y = "Dep delay (min)", fill = "Count")
```
## Reports: In my opinion, I treated “impact” as a shift in the distribution of departure delay, not just referred to single correlation, because delays are heavy-tailed and zero-inflated. Given to such understanding, based on the plots above, precipitation had the strongest impact. The violin-box plot by precipitation bin showed large right-shift and dramatic spread as precipitation increases, with the >1 inch bin having a much higher median and very long upper tail.The mean delay by precipitation bin rises steeply (≈10 min on dry days to ~100+ min when >1 inch). Therefore,  precipitation showed a large absolute effect on delay minutes and increases the chance of extreme delays. In summation, heavy precipitation is the dominant driver of longer and more variable departure delays, followed by poor visibility and high winds; humidity, pressure, and temperature show at relatively weak associations.